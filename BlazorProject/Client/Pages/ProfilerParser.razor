@page "/ProfilerParser"

@using System.Linq;
@using System.IO
@using System.Globalization;

@inject HttpClient Http

<h3>Profiler Parser</h3>
<div>
    <p>
        Profiler Parser is used to highlight weakauras "addons" which has high ms. Still WIP
    </p>
</div>

<div style="margin-top: 30px">
    <label>Show only highlighted: </label>
    <input type="checkbox" checked=@onlyHighlited @onchange="CheckboxClicked" />
</div>
<div>
    <label>High Ms value: </label>
    <input type="text" id="highMs" name="highMs" @oninput="HighMsValueChanged" value=@highMsValue style="max-width:70px">
</div>
<div>
    <label>Upload files: </label>
    <InputFile OnChange="@LoadFiles" multiple />
</div>

<div style="float:left">
    <textarea @oninput="HandleOnChange" rows="20" cols="50" @bind="inputData"></textarea>

</div>

<div class="dataLines">
    @if (onlyHighlited)
    {
        @foreach (var line in highlightedLines)
        {
            <p style="color:red">@line</p>
        }
    }

    else
    {
        @foreach (var line in extractedLines)
        {
            if (highlightedLines.Contains(line))
            {
                <p style="color:red">@line</p>
            }

            else
            {
                <p>@line</p>
            }
        }
    }
</div>

<div style="float: left; width: 75%">
    <h2>
        Profiler output example:   (copy this into textbox)
    </h2>
    <p>
        Total time: 4879.95ms<br>
        Time inside WA: 70.65ms (0.12ms)<br>
        Time spent inside WA: 1.45%<br>
        <br>
        Systems:<br>
        timer tick 48.06ms, 68.02% (0.11ms)<br>
        generictrigger FRAME_UPDATE 19.63ms, 27.79% (0.10ms)<br>
        dynamic conditions 1.95ms, 2.76% (0.04ms)<br>
        bufftrigger2 0.86ms, 1.22% (0.00ms)<br>
        load 0.12ms, 0.17% (0.01ms)<br>
        <br>
        Auras:<br>
        Total time attributed to auras:<br>
        Maelstrom - Bar 16.43ms, 28.48% (0.08ms)<br>
        Crash Lightning - Buff 15.53ms, 26.91% (0.10ms)<br>
        Healing Rain 7.82ms, 13.55% (0.05ms)<br>
        Maelstrom Weapon - Bar 5 3.75ms, 6.50% (0.03ms)<br>
        Maelstrom Weapon - Bar 3 3.52ms, 6.11% (0.01ms)<br>
        Maelstrom Weapon - Bar 1 3.35ms, 5.80% (0.05ms)<br>
        Maelstrom Weapon - Bar 2 3.32ms, 5.76% (0.02ms)<br>
        Maelstrom Weapon - Bar 4 3.19ms, 5.52% (0.02ms)<br>
        Earth Shock 0.78ms, 1.35% (0.04ms)<br>
    </p>
</div>


@code {
    private bool onlyHighlited = false;
    private double highMsValue = 0.8;
    private string inputData;
    private List<string> extractedLines = new List<string>();
    private List<string> highlightedLines = new List<string>();

    private void HighlightHighMs(IEnumerable<string> data, double highMs)
    {
        Console.WriteLine(highMs);
        Dictionary<string, (double percentage, double ms)> linesDictionary = new() { };

        try
        {
            foreach (var line in data)
            {
                var valueIndex = line.IndexOf('(');
                var percentageIndex = line.IndexOf('%');

                if (valueIndex != -1 && percentageIndex != -1 && percentageIndex >= 5)
                {
                    string value = line.Substring(valueIndex + 1, 4);
                    var isValueParsed = double.TryParse(value, NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands, CultureInfo.InvariantCulture, out var parsedValue);

                    string percentage = line.Substring(percentageIndex - 5, 4);

                    var isPercentageParsed = double.TryParse(percentage.Trim(), NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out var parsedPercentage);

                    if (isValueParsed && isPercentageParsed && !linesDictionary.ContainsKey(line))
                    {
                        linesDictionary.Add(line, (parsedPercentage, parsedValue));
                    }
                }
            }
        }

        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }


        var list = new List<string>();

        foreach (var line in linesDictionary.OrderByDescending(x => x.Value.percentage))
        {
            if (line.Value.ms > highMs)
            {
                list.Add(line.Key);
            }
        }

        highlightedLines = list;
    }

    private List<string> GetAurasLines(List<string> extractedLines)
    {
        var data = new List<string>();

        int indexOfAuras = 1000000000;
        var lines = extractedLines.ToArray();

        for (int index = 0; index < lines.Length - 1; index++)
        {
            if (lines[index].Contains("Total time attributed to auras:"))
            {
                indexOfAuras = index;
            }

            if (index > indexOfAuras)
            {
                data.Add(lines[index]);
            }
        }        

        return data;
    }

    private void HandleOnChange(ChangeEventArgs args)
    {

        var lines = args.Value.ToString().Split("\n");

        if (lines.ToList().Count > 1)
        {
            extractedLines = GetAurasLines(lines.ToList());

            HighlightHighMs(extractedLines, highMsValue);
        }

        else
        {
            extractedLines.Clear();
            highlightedLines.Clear();
        }
    }

    public void CheckboxClicked()
    {
        onlyHighlited = !onlyHighlited;
    }

    private void HighMsValueChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value.ToString(), out var parsedValue))
        {
            highMsValue = parsedValue;

            HighlightHighMs(extractedLines, highMsValue);
        }
    }

    private Dictionary<IBrowserFile, string> loadedFiles = new Dictionary<IBrowserFile, string>();
    private bool isLoading;
    string exceptionMessage;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        exceptionMessage = string.Empty;

        try
        {
            foreach (var file in e.GetMultipleFiles())
            {
                using var reader =
                    new StreamReader(file.OpenReadStream());

                loadedFiles.Add(file, await reader.ReadToEndAsync());
            }

            GetDataFromFiles(loadedFiles);
            HighlightHighMs(extractedLines, highMsValue);
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }

        isLoading = false;
    }

    private void GetDataFromFiles(Dictionary<IBrowserFile, string> loadedFiles)
    {
        var dataList = new List<IEnumerable<string>>();

        inputData = "";
        foreach (var (file, content) in loadedFiles)
        {
            inputData = inputData + content;
            dataList.Add(GetAurasLines(content.Split("\n").ToList()));
        }

        var list = new List<string>();
        foreach (var data in dataList)
        {
            foreach (var line in data)
            {
                list.Add(line);
            }
        }

        extractedLines = list;
    }
}
